{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Alyssa%20Janes/Desktop/deer-intake/lib/api.ts"],"sourcesContent":["const BASE = '/api/gas2';\r\n\r\nexport type GetJobResp = { ok: boolean; exists: boolean; job?: any; error?: string };\r\nexport type SaveResp   = { ok: boolean; error?: string; row?: number };\r\nexport type ProgressResp = { ok: boolean; nextStatus?: 'Processing'|'Finished'|null; error?: string };\r\n\r\nexport type SearchJobsResp = {\r\n  ok: boolean;\r\n  rows: any[];\r\n  total?: number;\r\n  error?: string;\r\n  jobs?: any[];\r\n  results?: any[];\r\n  raw?: any;\r\n};\r\n\r\nasync function fetchJson(url: string, init?: RequestInit, attempts = 3, timeoutMs = 7000) {\r\n  let lastErr: any = null;\r\n  for (let i = 0; i < attempts; i++) {\r\n    const ctrl = new AbortController();\r\n    const to = setTimeout(() => ctrl.abort(), timeoutMs);\r\n    try {\r\n      const res = await fetch(url, { cache: 'no-store', ...init, signal: ctrl.signal });\r\n      clearTimeout(to);\r\n      const data = await res.json().catch(() => ({}));\r\n      if (res.ok) return data;\r\n      lastErr = (data as any)?.error || `HTTP ${res.status}`;\r\n      if ([429, 502, 503, 504].includes(res.status)) {\r\n        await new Promise(r => setTimeout(r, 250 * (i + 1)));\r\n        continue;\r\n      }\r\n      break;\r\n    } catch (e: any) {\r\n      clearTimeout(to);\r\n      lastErr = e?.name === 'AbortError' ? 'Request timed out' : (e?.message || e);\r\n      await new Promise(r => setTimeout(r, 250 * (i + 1)));\r\n    }\r\n  }\r\n  return { ok: false, error: String(lastErr || 'Network error') };\r\n}\r\n\r\nexport async function getJob(tag: string): Promise<GetJobResp> {\r\n  return fetchJson(`${BASE}/get?tag=${encodeURIComponent(tag)}`);\r\n}\r\n\r\nexport async function saveJob(job: any): Promise<SaveResp> {\r\n  return fetchJson(`${BASE}/save`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify({ job })\r\n  });\r\n}\r\n\r\nexport async function progress(tag: string): Promise<ProgressResp> {\r\n  return fetchJson(`${BASE}/progress`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify({ tag })\r\n  });\r\n}\r\n\r\nexport async function searchJobs(\r\n  opts?: string | { q?: string; status?: string; limit?: number; offset?: number }\r\n): Promise<SearchJobsResp> {\r\n  const o = typeof opts === 'string' ? { q: opts } : (opts || {});\r\n  const p = new URLSearchParams();\r\n  if (o.q) p.set('q', o.q as string);\r\n  if (typeof (o as any).status === 'string') p.set('status', (o as any).status as string);\r\n  if ((o as any).limit != null) p.set('limit', String((o as any).limit));\r\n  if (o as any && (o as any).offset != null) p.set('offset', String((o as any).offset));\r\n\r\n  const data: any = await fetchJson(`${BASE}/search?${p.toString()}`);\r\n  const rows =\r\n    Array.isArray(data?.jobs)    ? data.jobs :\r\n    Array.isArray(data?.rows)    ? data.rows :\r\n    Array.isArray(data?.results) ? data.results :\r\n    Array.isArray(data)          ? data :\r\n    [];\r\n\r\n  const ok = !!data?.ok || Array.isArray(rows);\r\n  const total = (typeof data?.total === 'number' ? data.total : rows.length) as number | undefined;\r\n\r\n  return {\r\n    ok,\r\n    rows,\r\n    total,\r\n    error: data?.error,\r\n    jobs: rows,\r\n    results: rows,\r\n    raw: data\r\n  };\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAM,OAAO;AAgBb,eAAe,UAAU,GAAW,EAAE,IAAkB,EAAE,WAAW,CAAC,EAAE,YAAY,IAAI;IACtF,IAAI,UAAe;IACnB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAK;QACjC,MAAM,OAAO,IAAI;QACjB,MAAM,KAAK,WAAW,IAAM,KAAK,KAAK,IAAI;QAC1C,IAAI;YACF,MAAM,MAAM,MAAM,MAAM,KAAK;gBAAE,OAAO;gBAAY,GAAG,IAAI;gBAAE,QAAQ,KAAK,MAAM;YAAC;YAC/E,aAAa;YACb,MAAM,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;YAC7C,IAAI,IAAI,EAAE,EAAE,OAAO;YACnB,UAAU,AAAC,MAAc,SAAS,CAAC,KAAK,EAAE,IAAI,MAAM,EAAE;YACtD,IAAI;gBAAC;gBAAK;gBAAK;gBAAK;aAAI,CAAC,QAAQ,CAAC,IAAI,MAAM,GAAG;gBAC7C,MAAM,IAAI,QAAQ,CAAA,IAAK,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;gBACjD;YACF;YACA;QACF,EAAE,OAAO,GAAQ;YACf,aAAa;YACb,UAAU,GAAG,SAAS,eAAe,sBAAuB,GAAG,WAAW;YAC1E,MAAM,IAAI,QAAQ,CAAA,IAAK,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;QACnD;IACF;IACA,OAAO;QAAE,IAAI;QAAO,OAAO,OAAO,WAAW;IAAiB;AAChE;AAEO,eAAe,OAAO,GAAW;IACtC,OAAO,UAAU,GAAG,KAAK,SAAS,EAAE,mBAAmB,MAAM;AAC/D;AAEO,eAAe,QAAQ,GAAQ;IACpC,OAAO,UAAU,GAAG,KAAK,KAAK,CAAC,EAAE;QAC/B,QAAQ;QACR,SAAS;YAAE,gBAAe;QAAmB;QAC7C,MAAM,KAAK,SAAS,CAAC;YAAE;QAAI;IAC7B;AACF;AAEO,eAAe,SAAS,GAAW;IACxC,OAAO,UAAU,GAAG,KAAK,SAAS,CAAC,EAAE;QACnC,QAAQ;QACR,SAAS;YAAE,gBAAe;QAAmB;QAC7C,MAAM,KAAK,SAAS,CAAC;YAAE;QAAI;IAC7B;AACF;AAEO,eAAe,WACpB,IAAgF;IAEhF,MAAM,IAAI,OAAO,SAAS,WAAW;QAAE,GAAG;IAAK,IAAK,QAAQ,CAAC;IAC7D,MAAM,IAAI,IAAI;IACd,IAAI,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;IACvB,IAAI,OAAO,AAAC,EAAU,MAAM,KAAK,UAAU,EAAE,GAAG,CAAC,UAAU,AAAC,EAAU,MAAM;IAC5E,IAAI,AAAC,EAAU,KAAK,IAAI,MAAM,EAAE,GAAG,CAAC,SAAS,OAAO,AAAC,EAAU,KAAK;IACpE,IAAI,KAAY,AAAC,EAAU,MAAM,IAAI,MAAM,EAAE,GAAG,CAAC,UAAU,OAAO,AAAC,EAAU,MAAM;IAEnF,MAAM,OAAY,MAAM,UAAU,GAAG,KAAK,QAAQ,EAAE,EAAE,QAAQ,IAAI;IAClE,MAAM,OACJ,MAAM,OAAO,CAAC,MAAM,QAAW,KAAK,IAAI,GACxC,MAAM,OAAO,CAAC,MAAM,QAAW,KAAK,IAAI,GACxC,MAAM,OAAO,CAAC,MAAM,WAAW,KAAK,OAAO,GAC3C,MAAM,OAAO,CAAC,QAAiB,OAC/B,EAAE;IAEJ,MAAM,KAAK,CAAC,CAAC,MAAM,MAAM,MAAM,OAAO,CAAC;IACvC,MAAM,QAAS,OAAO,MAAM,UAAU,WAAW,KAAK,KAAK,GAAG,KAAK,MAAM;IAEzE,OAAO;QACL;QACA;QACA;QACA,OAAO,MAAM;QACb,MAAM;QACN,SAAS;QACT,KAAK;IACP;AACF","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Alyssa%20Janes/Desktop/deer-intake/app/reports/calls/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport { searchJobs } from '@/lib/api';\r\n\r\ntype AnyJob = Record<string, any>;\r\n\r\nexport default function CallReportPage() {\r\n  const [jobs, setJobs] = useState<AnyJob[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [err, setErr] = useState<string>('');\r\n  const [showDebug, setShowDebug] = useState(false);\r\n  const sp = useSearchParams();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await searchJobs('@report');\r\n        const rows: AnyJob[] = Array.isArray(res?.rows) ? res.rows : [];\r\n        setJobs(rows);\r\n      } catch (e: any) {\r\n        setErr(e?.message || String(e));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => { if (sp.get('debug') === '1') setShowDebug(true); }, [sp]);\r\n\r\n  const analysis = useMemo(() => analyze(jobs), [jobs]);\r\n  const toCall = useMemo(() => analysis.matched, [analysis]);\r\n\r\n  const printAll = () => {\r\n    const el = document.getElementById('call-report');\r\n    if (!el) return;\r\n    const win = window.open('', '_blank', 'width=1200,height=800');\r\n    if (!win) return;\r\n    const html = `<!doctype html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <title>Call Sheet</title>\r\n  <style>\r\n    @page { size: landscape; margin: 10mm; }\r\n    @media print { @page { size: landscape; margin: 10mm; } }\r\n    body { font-family: Arial, sans-serif; padding: 16px; }\r\n    table { width: 100%; border-collapse: collapse; }\r\n    th, td { border: 1px solid #e5e7eb; padding: 6px 6px; font-size: 12px; vertical-align: top; }\r\n    th { background: #f3f4f6; text-align: left; }\r\n    .num { font-feature-settings: 'tnum' 1; font-variant-numeric: tabular-nums; text-align: right; white-space: nowrap; }\r\n    .paid { text-align:center; font-weight: 800; }\r\n    .paid.yes { color:#059669; }\r\n    .paid.no { color:#94a3b8; }\r\n    ul.reasons { margin: 0; padding-left: 18px; }\r\n    ul.reasons li { margin: 0; }\r\n  </style>\r\n</head>\r\n<body>\r\n  ${el.outerHTML}\r\n  <script>setTimeout(() => window.print(), 50);</script>\r\n</body>\r\n</html>`;\r\n    win.document.open();\r\n    win.document.write(html);\r\n    win.document.close();\r\n  };\r\n\r\n  return (\r\n    <div className=\"light-page\">\r\n      <h1>Call Report</h1>\r\n      {err && <div className=\"err\">{err}</div>}\r\n      {loading && <div className=\"muted\">Loading…</div>}\r\n\r\n      <div className=\"bar\">\r\n        <div>{analysis.total} jobs • {analysis.counts.finished} finished • {analysis.counts.caped} caped • {analysis.counts.delivered} delivered • <strong>{toCall.length} to call</strong></div>\r\n        <div className=\"actions\">\r\n          <button className=\"secondary\" onClick={() => setShowDebug(s => !s)}>{showDebug ? 'Hide Debug' : 'Show Debug'}</button>\r\n          <button onClick={printAll}>Print</button>\r\n        </div>\r\n      </div>\r\n\r\n      {showDebug && (\r\n        <div className=\"debug\">\r\n          <h3>Debug</h3>\r\n          <p className=\"muted\">First 5 normalized rows:</p>\r\n          <table>\r\n            <thead>\r\n              <tr><th>#</th><th>Tag</th><th>Status</th><th>Caping Status</th><th>Webbs Status</th><th>Paid?</th><th>Reason</th></tr>\r\n            </thead>\r\n            <tbody>\r\n              {analysis.peek.map((p, i) => (\r\n                <tr key={i}>\r\n                  <td>{i+1}</td>\r\n                  <td>{p.map['tag'] ?? ''}</td>\r\n                  <td>{p.map['status'] ?? ''}</td>\r\n                  <td>{p.map['capingstatus'] ?? ''}</td>\r\n                  <td>{p.map['webbsstatus'] ?? ''}</td>\r\n                  <td>{String(p.paidAll)}</td>\r\n                  <td>{(p.reasons || []).join(', ')}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      <section id=\"call-report\" className=\"card\">\r\n        <CallTable rows={toCall} />\r\n      </section>\r\n\r\n      <style jsx>{`\r\n        .wrap { max-width: 1200px; margin: 18px auto; padding: 8px; font-family: Arial, sans-serif; }\r\n        h1 { margin: 0 0 12px; }\r\n        .card { border: 1px solid #e5e7eb; background: #fff; border-radius: 10px; padding: 12px; margin-bottom: 14px; }\r\n        .bar { display:flex; align-items:center; justify-content:space-between; gap:12px; padding:8px 12px; border:1px solid #e5e7eb; background:#f8fafc; border-radius:10px; margin-bottom:10px; }\r\n        .actions { display:flex; gap:8px; }\r\n        button { padding: 8px 12px; border-radius: 8px; border: 1px solid #cbd5e1; background: #155acb; color: #fff; font-weight: 700; }\r\n        button.secondary { background: #eef2ff; color: #1e40af; }\r\n        .muted { color: #6b7280; }\r\n        .err { color: #b91c1c; margin-bottom: 8px; }\r\n\r\n        table { width: 100%; border-collapse: collapse; }\r\n        th, td { border: 1px solid #e5e7eb; padding: 6px 6px; font-size: 12px; vertical-align: top; }\r\n        th { background: #f3f4f6; text-align: left; }\r\n        .num { font-feature-settings: 'tnum' 1; font-variant-numeric: tabular-nums; text-align: right; white-space: nowrap; }\r\n        .paid { text-align:center; font-weight: 800; }\r\n        .paid.yes { color:#059669; }\r\n        .paid.no { color:#94a3b8; }\r\n\r\n        @media print {\r\n          @page { size: landscape; margin: 10mm; }\r\n          .wrap { max-width: 100%; }\r\n          .card { break-inside: avoid; }\r\n          button { display: none; }\r\n          .bar { border: none; background: none; padding: 0; }\r\n        }\r\n        .debug { border:1px dashed #94a3b8; padding:8px; border-radius:8px; margin-bottom:10px; background:#fff; }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction analyze(jobs: AnyJob[]) {\r\n  const matched: Array<AnyJob & { reasons: string[] }> = [];\r\n  let finished = 0, caped = 0, delivered = 0;\r\n  const peek: Array<{ map: Record<string, any>, reasons: string[], paidAll: boolean }> = [];\r\n\r\n  for (const j of jobs) {\r\n    const map = normalizeKeys(j);\r\n    const main = clean(map['status']);\r\n    const cape = clean(map['capingstatus']);\r\n    const webb = clean(map['webbsstatus']);\r\n\r\n    const reasons: string[] = [];\r\n    if (hasWord(main, 'finished')) { reasons.push('Meat Ready'); finished++; }\r\n    if (hasWord(cape, 'caped'))    { reasons.push('Cape Ready'); caped++; }\r\n    if (hasWord(webb, 'delivered')){ reasons.push('Webbs Ready'); delivered++; }\r\n\r\n    const paidAll = isPaidAll(map);\r\n\r\n    if (peek.length < 5) peek.push({ map, reasons, paidAll });\r\n    if (reasons.length) matched.push({ ...j, reasons });\r\n  }\r\n\r\n  return {\r\n    total: jobs.length,\r\n    counts: { finished, caped, delivered },\r\n    matched: sortForCalls(matched),\r\n    peek,\r\n  };\r\n}\r\n\r\nfunction CallTable({ rows }: { rows: (AnyJob & { reasons: string[] })[] }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th style={{width:'70px'}}>Tag</th>\r\n          <th>Customer</th>\r\n          <th style={{width:'150px'}}>Phone</th>\r\n          <th>Reason for Contact</th>\r\n          <th className=\"num\" style={{width:'95px'}}>Proc $</th>\r\n          <th className=\"num\" style={{width:'95px'}}>Spec $</th>\r\n          <th className=\"num\" style={{width:'95px'}}>Total $</th>\r\n          <th style={{width:'70px'}}>Proc Paid</th>\r\n          <th style={{width:'70px'}}>Spec Paid</th>\r\n          <th style={{width:'70px'}}>Paid (All)</th>\r\n          <th>Notes</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {rows.length === 0 ? (\r\n          <tr>\r\n            <td colSpan={11} style={{textAlign:'center', color:'#6b7280'}}>No rows</td>\r\n          </tr>\r\n        ) : rows.map((j, i) => {\r\n          const map = normalizeKeys(j);\r\n\r\n          const proc = suggestedProcessingPrice(map['processtype'], truthy(map['beeffat']), truthy(map['webbsorder']));\r\n          const spec = specialtyPriceFrom(map);\r\n          const total = proc + spec;\r\n\r\n          // Paid mapping: exact headers you said + aliases\r\n          const paidAll = isPaidAll(map);\r\n          const paidProc = isPaidProc(map, paidAll);\r\n          const paidSpec = isPaidSpec(map, paidAll);\r\n\r\n          return (\r\n            <tr key={(map['tag'] ?? '') + '-' + i}>\r\n              <td>{map['tag'] || ''}</td>\r\n              <td>{map['customer'] || ''}</td>\r\n              <td>{fmtPhone(map['phone'])}</td>\r\n              <td>\r\n                <ul className=\"reasons\">\r\n                  {((j as any).reasons || []).map((r:string, idx:number) => <li key={idx}>{r}</li>)}\r\n                </ul>\r\n              </td>\r\n              <td className=\"num\">{fmtMoney(proc)}</td>\r\n              <td className=\"num\">{fmtMoney(spec)}</td>\r\n              <td className=\"num\"><strong>{fmtMoney(total)}</strong></td>\r\n              <td className={`paid ${paidProc ? 'yes' : 'no'}`}>{paidProc ? '✓' : '▢'}</td>\r\n              <td className={`paid ${paidSpec ? 'yes' : 'no'}`}>{paidSpec ? '✓' : '▢'}</td>\r\n              <td className={`paid ${paidAll ? 'yes' : 'no'}`}>{paidAll ? '✓' : '▢'}</td>\r\n              <td>{map['notes'] || ''}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\n/* ----------------- utils ----------------- */\r\nfunction normalizeKeys(obj: Record<string, any>) {\r\n  const o: Record<string, any> = {};\r\n  for (const [k, v] of Object.entries(obj)) {\r\n    const nk = String(k).toLowerCase().replace(/[^a-z0-9]+/g, '');\r\n    o[nk] = v;\r\n  }\r\n  return o;\r\n}\r\nfunction truthy(v: any) {\r\n  if (v === true) return true;\r\n  if (typeof v === 'number') return v > 0;\r\n  const s = String(v ?? '').trim().toLowerCase();\r\n  return ['true','t','yes','y','1','paid','x','✓','✔','on'].includes(s);\r\n}\r\nfunction isPaidAll(map: Record<string, any>) {\r\n  // Exact headers provided + common variants\r\n  return truthy(map['paid']) || truthy(map['paidinfull']) || truthy(map['paidall']) || truthy(map['paidfull']);\r\n}\r\nfunction isPaidProc(map: Record<string, any>, paidAll: boolean) {\r\n  return paidAll || truthy(map['paidprocessing']) || truthy(map['processingpaid']) || truthy(map['procpaid']) || truthy(map['paidproc']);\r\n}\r\nfunction isPaidSpec(map: Record<string, any>, paidAll: boolean) {\r\n  return paidAll || truthy(map['paidspecialty']) || truthy(map['specialtypaid']) || truthy(map['specpaid']) || truthy(map['paidspec']);\r\n}\r\nfunction clean(v?: any) { return String(v ?? '').trim().toLowerCase(); }\r\nfunction hasWord(text: string, word: string) { return !!text && text.includes(word); }\r\nfunction fmtPhone(v?: any) {\r\n  const s = String(v ?? '').replace(/\\D+/g, '');\r\n  if (s.length === 10) return `(${s.slice(0,3)}) ${s.slice(3,6)}-${s.slice(6)}`;\r\n  if (s.length === 7)  return `${s.slice(0,3)}-${s.slice(3)}`;\r\n  return String(v ?? '');\r\n}\r\nfunction sortForCalls<T extends Record<string, any>>(rows: T[]) {\r\n  const num = (x: any) => {\r\n    const n = parseInt(String(x||'').replace(/[^\\d]/g,''),10);\r\n    return Number.isFinite(n) ? n : 0;\r\n  };\r\n  return [...rows].sort((a,b) => {\r\n    const ta = num((a as any).tag ?? (a as any)['Tag']);\r\n    const tb = num((b as any).tag ?? (b as any)['Tag']);\r\n    if (ta !== tb) return ta - tb;\r\n    const ca = String((a as any).customer ?? (a as any)['Customer'] ?? '').toLowerCase();\r\n    const cb = String((b as any).customer ?? (b as any)['Customer'] ?? '').toLowerCase();\r\n    return ca.localeCompare(cb);\r\n  });\r\n}\r\nfunction toInt(val: any) {\r\n  const n = parseInt(String(val ?? '').replace(/[^0-9]/g, ''), 10);\r\n  return Number.isFinite(n) && n > 0 ? n : 0;\r\n}\r\nfunction suggestedProcessingPrice(proc: any, beef: boolean, webbs: boolean) {\r\n  const p = String(proc || '').toLowerCase();\r\n  let base = 0;\r\n  if (p.includes('cape') && !p.includes('skull')) base = 150;\r\n  else if (p.includes('standard') || p.includes('skull') || p.includes('euro')) base = 130;\r\n  return base + (beef ? 5 : 0) + (webbs ? 20 : 0);\r\n}\r\nfunction specialtyPriceFrom(map: Record<string, any>) {\r\n  const hasSpec = truthy(map['specialtyproducts']);\r\n  if (!hasSpec) return 0;\r\n  const ss  = toInt(map['summersausagelbs']);\r\n  const ssc = toInt(map['summersausagecheeselbs']);\r\n  const jer = toInt(map['slicedjerkylbs']);\r\n  return ss * 4.25 + ssc * 4.60 + jer * 15.0;\r\n}\r\nfunction fmtMoney(n: number) { return (Number.isFinite(n) ? n : 0).toFixed(2); }\r\n"],"names":[],"mappings":"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","debugId":null}}]
}