// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/admin/health/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/health">> = Specific
  const handler = {} as typeof import("../../app/admin/health/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/board/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/board">> = Specific
  const handler = {} as typeof import("../../app/board/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/butcher/intake/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/butcher/intake">> = Specific
  const handler = {} as typeof import("../../app/butcher/intake/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/butcher/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/butcher">> = Specific
  const handler = {} as typeof import("../../app/butcher/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/intake/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/intake">> = Specific
  const handler = {} as typeof import("../../app/intake/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/reports/calls/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reports/calls">> = Specific
  const handler = {} as typeof import("../../app/reports/calls/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/scan/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/scan">> = Specific
  const handler = {} as typeof import("../../app/scan/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/search/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/search">> = Specific
  const handler = {} as typeof import("../../app/search/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas/get/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas/get">> = Specific
  const handler = {} as typeof import("../../app/api/gas/get/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas/progress/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas/progress">> = Specific
  const handler = {} as typeof import("../../app/api/gas/progress/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas/save/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas/save">> = Specific
  const handler = {} as typeof import("../../app/api/gas/save/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas/search/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas/search">> = Specific
  const handler = {} as typeof import("../../app/api/gas/search/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas2/get/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas2/get">> = Specific
  const handler = {} as typeof import("../../app/api/gas2/get/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas2/progress/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas2/progress">> = Specific
  const handler = {} as typeof import("../../app/api/gas2/progress/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas2/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas2">> = Specific
  const handler = {} as typeof import("../../app/api/gas2/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas2/save/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas2/save">> = Specific
  const handler = {} as typeof import("../../app/api/gas2/save/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/gas2/search/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gas2/search">> = Specific
  const handler = {} as typeof import("../../app/api/gas2/search/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
