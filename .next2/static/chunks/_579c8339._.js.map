{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Alyssa%20Janes/Desktop/deer-intake/lib/api.ts"],"sourcesContent":["const BASE = '/api/gas2';\r\n\r\nexport type GetJobResp = { ok: boolean; exists: boolean; job?: any; error?: string };\r\nexport type SaveResp   = { ok: boolean; error?: string; row?: number };\r\nexport type ProgressResp = { ok: boolean; nextStatus?: 'Processing'|'Finished'|null; error?: string };\r\n\r\nexport type SearchJobsResp = {\r\n  ok: boolean;\r\n  rows: any[];\r\n  total?: number;\r\n  error?: string;\r\n  jobs?: any[];\r\n  results?: any[];\r\n  raw?: any;\r\n};\r\n\r\nasync function fetchJson(url: string, init?: RequestInit, attempts = 3, timeoutMs = 7000) {\r\n  let lastErr: any = null;\r\n  for (let i = 0; i < attempts; i++) {\r\n    const ctrl = new AbortController();\r\n    const to = setTimeout(() => ctrl.abort(), timeoutMs);\r\n    try {\r\n      const res = await fetch(url, { cache: 'no-store', ...init, signal: ctrl.signal });\r\n      clearTimeout(to);\r\n      const data = await res.json().catch(() => ({}));\r\n      if (res.ok) return data;\r\n      lastErr = (data as any)?.error || `HTTP ${res.status}`;\r\n      if ([429, 502, 503, 504].includes(res.status)) {\r\n        await new Promise(r => setTimeout(r, 250 * (i + 1)));\r\n        continue;\r\n      }\r\n      break;\r\n    } catch (e: any) {\r\n      clearTimeout(to);\r\n      lastErr = e?.name === 'AbortError' ? 'Request timed out' : (e?.message || e);\r\n      await new Promise(r => setTimeout(r, 250 * (i + 1)));\r\n    }\r\n  }\r\n  return { ok: false, error: String(lastErr || 'Network error') };\r\n}\r\n\r\nexport async function getJob(tag: string): Promise<GetJobResp> {\r\n  return fetchJson(`${BASE}/get?tag=${encodeURIComponent(tag)}`);\r\n}\r\n\r\nexport async function saveJob(job: any): Promise<SaveResp> {\r\n  return fetchJson(`${BASE}/save`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify({ job })\r\n  });\r\n}\r\n\r\nexport async function progress(tag: string): Promise<ProgressResp> {\r\n  return fetchJson(`${BASE}/progress`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type':'application/json' },\r\n    body: JSON.stringify({ tag })\r\n  });\r\n}\r\n\r\nexport async function searchJobs(\r\n  opts?: string | { q?: string; status?: string; limit?: number; offset?: number }\r\n): Promise<SearchJobsResp> {\r\n  const o = typeof opts === 'string' ? { q: opts } : (opts || {});\r\n  const p = new URLSearchParams();\r\n  if (o.q) p.set('q', o.q as string);\r\n  if (typeof (o as any).status === 'string') p.set('status', (o as any).status as string);\r\n  if ((o as any).limit != null) p.set('limit', String((o as any).limit));\r\n  if (o as any && (o as any).offset != null) p.set('offset', String((o as any).offset));\r\n\r\n  const data: any = await fetchJson(`${BASE}/search?${p.toString()}`);\r\n  const rows =\r\n    Array.isArray(data?.jobs)    ? data.jobs :\r\n    Array.isArray(data?.rows)    ? data.rows :\r\n    Array.isArray(data?.results) ? data.results :\r\n    Array.isArray(data)          ? data :\r\n    [];\r\n\r\n  const ok = !!data?.ok || Array.isArray(rows);\r\n  const total = (typeof data?.total === 'number' ? data.total : rows.length) as number | undefined;\r\n\r\n  return {\r\n    ok,\r\n    rows,\r\n    total,\r\n    error: data?.error,\r\n    jobs: rows,\r\n    results: rows,\r\n    raw: data\r\n  };\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Alyssa%20Janes/Desktop/deer-intake/app/board/page.tsx"],"sourcesContent":["'use client';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { searchJobs } from '@/lib/api';\r\n\r\ntype Row = {\r\n  row: number;\r\n  tag: string;\r\n  customer?: string;\r\n  phone?: string;\r\n  status?: string;\r\n  dropoff?: string;\r\n};\r\n\r\nconst REFRESH_MS = 5000;\r\n\r\nexport default function ReadyBoard() {\r\n  const [processing, setProcessing] = useState<Row[]>([]);\r\n  const [finished, setFinished] = useState<Row[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [err, setErr] = useState('');\r\n\r\n  // Poll GAS every few seconds\r\n  useEffect(() => {\r\n    let alive = true;\r\n\r\n    const tick = async () => {\r\n      try {\r\n        setErr('');\r\n        const [p, f] = await Promise.all([\r\n          searchJobs({ status: 'Processing', limit: 200 }),\r\n          searchJobs({ status: 'Finished', limit: 200 }),\r\n        ]);\r\n        if (!alive) return;\r\n        if (!p?.ok || !f?.ok) throw new Error(p?.error || f?.error || 'Board fetch failed');\r\n\r\n        const proc = (p.rows || []).map((r:any) => ({ ...r, customer: r.customer || r.name }));\r\n        const fin  = (f.rows || []).map((r:any) => ({ ...r, customer: r.customer || r.name }));\r\n\r\n        setProcessing(proc);\r\n        setFinished(fin);\r\n      } catch (e:any) {\r\n        if (alive) setErr(e?.message || 'Board fetch failed');\r\n      } finally {\r\n        if (alive) setLoading(false);\r\n      }\r\n    };\r\n\r\n    tick();\r\n    const id = setInterval(tick, REFRESH_MS);\r\n    return () => { alive = false; clearInterval(id); };\r\n  }, []);\r\n\r\n  // Fancy fullscreen + wake lock for TVs\r\n  const wakeRef = useRef<any>(null);\r\n  const goFullscreen = async () => {\r\n    try { if (!document.fullscreenElement) await document.documentElement.requestFullscreen(); } catch {}\r\n    try {\r\n      // @ts-ignore\r\n      if (!wakeRef.current && navigator.wakeLock?.request) {\r\n        // @ts-ignore\r\n        wakeRef.current = await navigator.wakeLock.request('screen');\r\n      }\r\n    } catch {}\r\n  };\r\n\r\n  const Section = ({ title, rows, color }:{ title:string; rows:Row[]; color:string }) => (\r\n    <section className=\"card\">\r\n      <header className=\"head\" style={{ borderColor: color }}>\r\n        <h2 style={{ color }}>{title}</h2>\r\n        <div className=\"count\" style={{ color }}>{rows.length}</div>\r\n      </header>\r\n      <div className=\"grid\">\r\n        {rows.length === 0 && <div className=\"empty\">—</div>}\r\n        {rows.map((r) => (\r\n          <div key={`${r.tag}-${r.row}`} className=\"item\">\r\n            <div className=\"tag\">{r.tag}</div>\r\n            <div className=\"name\">{r.customer || '—'}</div>\r\n            <div className=\"meta\">{r.dropoff || ''}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n\r\n  return (\r\n    <main className=\"board-wrap\">\r\n      <div className=\"topbar\">\r\n        <div className=\"title\">Butcher Board</div>\r\n        <div className=\"spacer\" />\r\n        <button className=\"btn\" onClick={goFullscreen}>Fullscreen</button>\r\n      </div>\r\n\r\n      {err && <div className=\"err\">{err}</div>}\r\n      {loading && <div className=\"muted\">Loading…</div>}\r\n\r\n      {!loading && (\r\n        <div className=\"cols\">\r\n          <Section title=\"Now Processing\" rows={processing} color=\"#2563eb\" />\r\n          <Section title=\"Finished & Ready\" rows={finished} color=\"#16a34a\" />\r\n        </div>\r\n      )}\r\n\r\n      <style jsx>{`\r\n        .board-wrap{ max-width:1400px; margin:10px auto; padding:10px; font-family:Arial, sans-serif; }\r\n        .topbar{ display:flex; align-items:center; gap:12px; margin-bottom:10px; }\r\n        .title{ font-weight:900; font-size:28px; letter-spacing:.5px; }\r\n        .spacer{ flex:1; }\r\n        .btn{ padding:8px 12px; border:1px solid var(--border); border-radius:8px; background:#155acb; color:#fff; font-weight:800; }\r\n\r\n        .cols{ display:grid; grid-template-columns: 1fr 1fr; gap:12px; }\r\n        .card{ background:#fff; border:1px solid var(--border); border-radius:14px; padding:12px; }\r\n        .head{ display:flex; align-items:center; gap:10px; border-left:4px solid; padding-left:8px; margin-bottom:10px; }\r\n        h2{ margin:0; font-size:20px; }\r\n        .count{ font-weight:900; margin-left:auto; }\r\n        .grid{ display:grid; grid-template-columns: repeat(3, 1fr); gap:8px; }\r\n        .item{ border:1px solid #e5e7eb; border-radius:10px; padding:10px; background:#fbfdff; display:grid; gap:4px; }\r\n        .item .tag{ font-size:22px; font-weight:900; letter-spacing:.5px; }\r\n        .item .name{ font-weight:700; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }\r\n        .item .meta{ color:#6b7280; font-size:12px; }\r\n        .empty{ color:#6b7280; font-size:14px; }\r\n\r\n        @media (max-width: 1100px){ .grid{ grid-template-columns: repeat(2, 1fr); } }\r\n        @media (max-width: 740px){ .grid{ grid-template-columns: 1fr; } .cols{ grid-template-columns: 1fr; } }\r\n      `}</style>\r\n    </main>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;AACA;AACA;;;AAFA;;;;AAaA,MAAM,aAAa;AAEJ,SAAS;;IACtB,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAQ,EAAE;IACtD,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAQ,EAAE;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IACvC,MAAM,CAAC,KAAK,OAAO,GAAG,IAAA,yKAAQ,EAAC;IAE/B,6BAA6B;IAC7B,IAAA,0KAAS;gCAAC;YACR,IAAI,QAAQ;YAEZ,MAAM;6CAAO;oBACX,IAAI;wBACF,OAAO;wBACP,MAAM,CAAC,GAAG,EAAE,GAAG,MAAM,QAAQ,GAAG,CAAC;4BAC/B,IAAA,2HAAU,EAAC;gCAAE,QAAQ;gCAAc,OAAO;4BAAI;4BAC9C,IAAA,2HAAU,EAAC;gCAAE,QAAQ;gCAAY,OAAO;4BAAI;yBAC7C;wBACD,IAAI,CAAC,OAAO;wBACZ,IAAI,EAAC,cAAA,wBAAA,EAAG,EAAE,KAAI,EAAC,cAAA,wBAAA,EAAG,EAAE,GAAE,MAAM,IAAI,MAAM,CAAA,cAAA,wBAAA,EAAG,KAAK,MAAI,cAAA,wBAAA,EAAG,KAAK,KAAI;wBAE9D,MAAM,OAAO,CAAC,EAAE,IAAI,IAAI,EAAE,EAAE,GAAG;8DAAC,CAAC,IAAU,CAAC;oCAAE,GAAG,CAAC;oCAAE,UAAU,EAAE,QAAQ,IAAI,EAAE,IAAI;gCAAC,CAAC;;wBACpF,MAAM,MAAO,CAAC,EAAE,IAAI,IAAI,EAAE,EAAE,GAAG;6DAAC,CAAC,IAAU,CAAC;oCAAE,GAAG,CAAC;oCAAE,UAAU,EAAE,QAAQ,IAAI,EAAE,IAAI;gCAAC,CAAC;;wBAEpF,cAAc;wBACd,YAAY;oBACd,EAAE,OAAO,GAAO;wBACd,IAAI,OAAO,OAAO,CAAA,cAAA,wBAAA,EAAG,OAAO,KAAI;oBAClC,SAAU;wBACR,IAAI,OAAO,WAAW;oBACxB;gBACF;;YAEA;YACA,MAAM,KAAK,YAAY,MAAM;YAC7B;wCAAO;oBAAQ,QAAQ;oBAAO,cAAc;gBAAK;;QACnD;+BAAG,EAAE;IAEL,uCAAuC;IACvC,MAAM,UAAU,IAAA,uKAAM,EAAM;IAC5B,MAAM,eAAe;QACnB,IAAI;YAAE,IAAI,CAAC,SAAS,iBAAiB,EAAE,MAAM,SAAS,eAAe,CAAC,iBAAiB;QAAI,EAAE,UAAM,CAAC;QACpG,IAAI;gBAEsB;YADxB,aAAa;YACb,IAAI,CAAC,QAAQ,OAAO,MAAI,sBAAA,UAAU,QAAQ,cAAlB,0CAAA,oBAAoB,OAAO,GAAE;gBACnD,aAAa;gBACb,QAAQ,OAAO,GAAG,MAAM,UAAU,QAAQ,CAAC,OAAO,CAAC;YACrD;QACF,EAAE,UAAM,CAAC;IACX;IAEA,MAAM,UAAU;YAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAA6C;6BAChF,6LAAC;YAAQ,WAAU;;8BACjB,6LAAC;oBAAO,WAAU;oBAAO,OAAO;wBAAE,aAAa;oBAAM;;sCACnD,6LAAC;4BAAG,OAAO;gCAAE;4BAAM;sCAAI;;;;;;sCACvB,6LAAC;4BAAI,WAAU;4BAAQ,OAAO;gCAAE;4BAAM;sCAAI,KAAK,MAAM;;;;;;;;;;;;8BAEvD,6LAAC;oBAAI,WAAU;;wBACZ,KAAK,MAAM,KAAK,mBAAK,6LAAC;4BAAI,WAAU;sCAAQ;;;;;;wBAC5C,KAAK,GAAG,CAAC,CAAC,kBACT,6LAAC;gCAA8B,WAAU;;kDACvC,6LAAC;wCAAI,WAAU;kDAAO,EAAE,GAAG;;;;;;kDAC3B,6LAAC;wCAAI,WAAU;kDAAQ,EAAE,QAAQ,IAAI;;;;;;kDACrC,6LAAC;wCAAI,WAAU;kDAAQ,EAAE,OAAO,IAAI;;;;;;;+BAH5B,AAAC,GAAW,OAAT,EAAE,GAAG,EAAC,KAAS,OAAN,EAAE,GAAG;;;;;;;;;;;;;;;;;;IAUnC,qBACE,6LAAC;kDAAe;;0BACd,6LAAC;0DAAc;;kCACb,6LAAC;kEAAc;kCAAQ;;;;;;kCACvB,6LAAC;kEAAc;;;;;;kCACf,6LAAC;wBAAuB,SAAS;kEAAf;kCAA6B;;;;;;;;;;;;YAGhD,qBAAO,6LAAC;0DAAc;0BAAO;;;;;;YAC7B,yBAAW,6LAAC;0DAAc;0BAAQ;;;;;;YAElC,CAAC,yBACA,6LAAC;0DAAc;;kCACb,6LAAC;wBAAQ,OAAM;wBAAiB,MAAM;wBAAY,OAAM;;;;;;;kCACxD,6LAAC;wBAAQ,OAAM;wBAAmB,MAAM;wBAAU,OAAM;;;;;;;;;;;;;;;;;;;;;;;AA4BlE;GA/GwB;KAAA","debugId":null}}]
}