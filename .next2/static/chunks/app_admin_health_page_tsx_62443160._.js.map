{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Alyssa%20Janes/Desktop/deer-intake/app/admin/health/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\n\r\nconst BASE = '/api/gas2'; // <-- the only thing that matters here\r\n\r\ntype Resp = any;\r\n\r\nexport default function AdminHealth() {\r\n  const [log, setLog] = useState<string>('');\r\n\r\n  async function run(label: string, fn: () => Promise<Response>) {\r\n    setLog((p) => p + `\\n=== ${label} ===`);\r\n    try {\r\n      const res = await fn();\r\n      const hdr = res.headers.get('X-Route'); // we set this in the new routes\r\n      const data: Resp = await res.json().catch(() => ({}));\r\n      setLog((p) =>\r\n        p +\r\n        `\\nURL: ${res.url}\\nStatus: ${res.status}\\nX-Route: ${hdr ?? '(none)'}\\n` +\r\n        JSON.stringify(data, null, 2) + '\\n'\r\n      );\r\n    } catch (e: any) {\r\n      setLog((p) => p + `\\nERROR: ${e?.message || String(e)}\\n`);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main style={{maxWidth:900, margin:'16px auto', fontFamily:'system-ui', lineHeight:1.3}}>\r\n      <h1>Admin Health</h1>\r\n\r\n      <div style={{display:'flex', gap:8, flexWrap:'wrap', margin:'12px 0'}}>\r\n        <button onClick={() => run('POST /progress', () =>\r\n          fetch(`${BASE}/progress`, {\r\n            method:'POST',\r\n            headers:{'Content-Type':'application/json'},\r\n            body: JSON.stringify({ tag: '1' }),\r\n          })\r\n        )}>Test Progress</button>\r\n\r\n        <button onClick={() => run('POST /save', () =>\r\n          fetch(`${BASE}/save`, {\r\n            method:'POST',\r\n            headers:{'Content-Type':'application/json'},\r\n            body: JSON.stringify({ job: { tag:'1', status:'Dropped Off' } }),\r\n          })\r\n        )}>Test Save</button>\r\n\r\n        <button onClick={() => run('GET /get', () =>\r\n          fetch(`${BASE}/get?tag=1`, { cache:'no-store' })\r\n        )}>Test Get</button>\r\n\r\n        <button onClick={() => run('GET /search', () =>\r\n          fetch(`${BASE}/search?q=1`, { cache:'no-store' })\r\n        )}>Test Search</button>\r\n      </div>\r\n\r\n      <pre style={{whiteSpace:'pre-wrap', background:'#0b1220', color:'#dbeafe', padding:12, borderRadius:8, minHeight:240}}>\r\n        {log || 'Click a test aboveâ€¦'}\r\n      </pre>\r\n    </main>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAIA,MAAM,OAAO,aAAa,uCAAuC;AAIlD,SAAS;;IACtB,MAAM,CAAC,KAAK,OAAO,GAAG,IAAA,yKAAQ,EAAS;IAEvC,eAAe,IAAI,KAAa,EAAE,EAA2B;QAC3D,OAAO,CAAC,IAAM,IAAI,AAAC,SAAc,OAAN,OAAM;QACjC,IAAI;YACF,MAAM,MAAM,MAAM;YAClB,MAAM,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,gCAAgC;YACxE,MAAM,OAAa,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;YACnD,OAAO,CAAC,IACN,IACA,AAAC,UAA6B,OAApB,IAAI,GAAG,EAAC,cAAoC,OAAxB,IAAI,MAAM,EAAC,eAA6B,OAAhB,gBAAA,iBAAA,MAAO,UAAS,QACtE,KAAK,SAAS,CAAC,MAAM,MAAM,KAAK;QAEpC,EAAE,OAAO,GAAQ;YACf,OAAO,CAAC,IAAM,IAAI,AAAC,YAAmC,OAAxB,CAAA,cAAA,wBAAA,EAAG,OAAO,KAAI,OAAO,IAAG;QACxD;IACF;IAEA,qBACE,6LAAC;QAAK,OAAO;YAAC,UAAS;YAAK,QAAO;YAAa,YAAW;YAAa,YAAW;QAAG;;0BACpF,6LAAC;0BAAG;;;;;;0BAEJ,6LAAC;gBAAI,OAAO;oBAAC,SAAQ;oBAAQ,KAAI;oBAAG,UAAS;oBAAQ,QAAO;gBAAQ;;kCAClE,6LAAC;wBAAO,SAAS,IAAM,IAAI,kBAAkB,IAC3C,MAAM,AAAC,GAAO,OAAL,MAAK,cAAY;oCACxB,QAAO;oCACP,SAAQ;wCAAC,gBAAe;oCAAkB;oCAC1C,MAAM,KAAK,SAAS,CAAC;wCAAE,KAAK;oCAAI;gCAClC;kCACC;;;;;;kCAEH,6LAAC;wBAAO,SAAS,IAAM,IAAI,cAAc,IACvC,MAAM,AAAC,GAAO,OAAL,MAAK,UAAQ;oCACpB,QAAO;oCACP,SAAQ;wCAAC,gBAAe;oCAAkB;oCAC1C,MAAM,KAAK,SAAS,CAAC;wCAAE,KAAK;4CAAE,KAAI;4CAAK,QAAO;wCAAc;oCAAE;gCAChE;kCACC;;;;;;kCAEH,6LAAC;wBAAO,SAAS,IAAM,IAAI,YAAY,IACrC,MAAM,AAAC,GAAO,OAAL,MAAK,eAAa;oCAAE,OAAM;gCAAW;kCAC7C;;;;;;kCAEH,6LAAC;wBAAO,SAAS,IAAM,IAAI,eAAe,IACxC,MAAM,AAAC,GAAO,OAAL,MAAK,gBAAc;oCAAE,OAAM;gCAAW;kCAC9C;;;;;;;;;;;;0BAGL,6LAAC;gBAAI,OAAO;oBAAC,YAAW;oBAAY,YAAW;oBAAW,OAAM;oBAAW,SAAQ;oBAAI,cAAa;oBAAG,WAAU;gBAAG;0BACjH,OAAO;;;;;;;;;;;;AAIhB;GAtDwB;KAAA","debugId":null}}]
}